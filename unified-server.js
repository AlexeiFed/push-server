/**
 * @file: unified-server.js
 * @description: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π push-server
 * @dependencies: firebase-admin, express, cors, web-push, dotenv
 * @created: 2025-07-23
 */

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const webpush = require('web-push');
const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
let serviceAccount;
if (process.env.FIREBASE_SERVICE_ACCOUNT) {
    serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
} else {
    serviceAccount = require('./serviceAccountKey.json');
}

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ web-push
webpush.setVapidDetails(
    'mailto:admin@vityaz-security.ru',
    process.env.VAPID_PUBLIC_KEY,
    process.env.VAPID_PRIVATE_KEY
);

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'https://vityaz-security-agency.web.app'],
    credentials: true
}));
app.use(express.json());

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
const lastSendTime = new Map();
const MIN_SEND_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

// ===== –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê =====
app.get('/status', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        version: '2.0.0',
        services: ['push', 'create-user', 'delete-user', 'force-logout']
    });
});

// ===== –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
app.post('/createUser', async (req, res) => {
    try {
        const { email, password, role, name, phone } = req.body;

        if (!email || !password || !role || !name) {
            return res.status(400).json({
                error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
        }

        const userRecord = await admin.auth().createUser({
            email: email,
            password: password,
            displayName: name
        });

        const userData = {
            email: email,
            role: role,
            name: name,
            phone: phone || '',
            createdAt: new Date()
        };

        await admin.firestore().collection('users').doc(userRecord.uid).set(userData);
        await admin.firestore().collection('user_credentials').doc(userRecord.uid).set({
            email: email,
            password: password,
            createdAt: new Date()
        });

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', userRecord.uid);

        res.json({
            uid: userRecord.uid,
            email: email,
            role: role,
            name: name,
            phone: phone || '',
            createdAt: new Date()
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);

        if (error.code === 'auth/email-already-exists') {
            res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        } else if (error.code === 'auth/invalid-password') {
            res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π' });
        } else if (error.code === 'auth/invalid-email') {
            res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        } else {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message });
        }
    }
});

// ===== –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
app.delete('/deleteUser/:uid', async (req, res) => {
    try {
        const { uid } = req.params;

        if (!uid) {
            return res.status(400).json({
                error: 'UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω'
            });
        }

        await admin.auth().deleteUser(uid);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ Firebase Auth:', uid);

        res.json({
            success: true,
            message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Firebase Auth`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);

        if (error.code === 'auth/user-not-found') {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        } else if (error.code === 'auth/invalid-uid') {
            res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        } else {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message });
        }
    }
});

// ===== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–•–û–î =====
app.post('/sendForceLogoutNotification', async (req, res) => {
    try {
        const { userId, message, type } = req.body;

        if (!userId || !message) {
            return res.status(400).json({
                error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userId, message'
            });
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ:', { userId, message, type });

        const db = admin.firestore();
        const querySnapshot = await db.collection('push_subscriptions')
            .where('userId', '==', userId)
            .get();

        if (querySnapshot.empty) {
            console.log('–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', userId);
            return res.json({
                success: true,
                message: '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                sentCount: 0
            });
        }

        let sentCount = 0;
        const errors = [];

        for (const doc of querySnapshot.docs) {
            const subscription = doc.data();

            try {
                const payload = JSON.stringify({
                    title: '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
                    body: message,
                    icon: '/logo192.png',
                    badge: '/logo192.png',
                    tag: 'force_logout',
                    data: {
                        type: 'force_logout',
                        userId: userId,
                        timestamp: Date.now()
                    },
                    actions: [
                        {
                            action: 'logout',
                            title: '–í—ã–π—Ç–∏'
                        }
                    ],
                    requireInteraction: true
                });

                await webpush.sendNotification(
                    {
                        endpoint: subscription.endpoint,
                        keys: {
                            p256dh: subscription.keys.p256dh,
                            auth: subscription.keys.auth
                        }
                    },
                    payload
                );

                sentCount++;
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:', doc.id);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:', doc.id, error);
                errors.push({ subscriptionId: doc.id, error: error.message });

                if (error.statusCode === 410) {
                    try {
                        await doc.ref.delete();
                        console.log('–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', doc.id);
                    } catch (deleteError) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', deleteError);
                    }
                }
            }
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', { sentCount, errors: errors.length });

        res.json({
            success: true,
            message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`,
            sentCount,
            errors: errors.length
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message
        });
    }
});

// ===== –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–í–û–ñ–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
app.post('/send-alarm', async (req, res) => {
    try {
        const { type, target, userIds, title, body } = req.body;

        console.log('üì° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
            type,
            target,
            userIds: userIds?.length || 0,
            title,
            body
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
        const now = Date.now();
        const lastSend = lastSendTime.get(target) || 0;

        if (now - lastSend < MIN_SEND_INTERVAL) {
            const remainingTime = Math.ceil((MIN_SEND_INTERVAL - (now - lastSend)) / 1000);
            console.log(`‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`);
            return res.status(429).json({
                success: false,
                message: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`,
                retryAfter: remainingTime
            });
        }

        lastSendTime.set(target, now);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const db = admin.firestore();
        let querySnapshot;

        if (target === 'users' && userIds && userIds.length > 0) {
            querySnapshot = await db.collection('push_subscriptions')
                .where('userId', 'in', userIds)
                .get();
        } else {
            querySnapshot = await db.collection('push_subscriptions').get();
        }

        if (querySnapshot.empty) {
            return res.json({
                success: true,
                message: '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                sentCount: 0
            });
        }

        let sentCount = 0;
        const errors = [];

        for (const doc of querySnapshot.docs) {
            const subscription = doc.data();

            try {
                const payload = JSON.stringify({
                    title: title || '–¢—Ä–µ–≤–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                    body: body || '–ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                    icon: '/logo192.png',
                    badge: '/logo192.png',
                    tag: 'alarm',
                    data: {
                        type: 'alarm',
                        objectId: req.body.objectId,
                        objectName: req.body.objectName,
                        timestamp: Date.now()
                    },
                    actions: [
                        {
                            action: 'view',
                            title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                        }
                    ],
                    requireInteraction: true
                });

                await webpush.sendNotification(
                    {
                        endpoint: subscription.endpoint,
                        keys: {
                            p256dh: subscription.keys.p256dh,
                            auth: subscription.keys.auth
                        }
                    },
                    payload
                );

                sentCount++;
                console.log('–¢—Ä–µ–≤–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:', doc.id);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:', doc.id, error);
                errors.push({ subscriptionId: doc.id, error: error.message });

                if (error.statusCode === 410) {
                    try {
                        await doc.ref.delete();
                        console.log('–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', doc.id);
                    } catch (deleteError) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', deleteError);
                    }
                }
            }
        }

        res.json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            sentCount,
            errorCount: errors.length,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            error: error.message
        });
    }
});

// ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
app.get('/stats', async (req, res) => {
    try {
        const db = admin.firestore();
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();
        const usersSnapshot = await db.collection('users').get();

        res.json({
            subscriptions: subscriptionsSnapshot.size,
            users: usersSnapshot.size,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
app.listen(PORT, () => {
    console.log(`üöÄ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: http://localhost:${PORT}/status`);
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${PORT}/stats`);
});

module.exports = app; 