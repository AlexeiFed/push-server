const express = require('express');
const cors = require('cors');
const { sendAlarmPushToAll, sendAlarmPushToUsers } = require('./send-alarm-push');

const app = express();
const PORT = process.env.PORT || 3001;

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
const lastSendTime = new Map();
const MIN_SEND_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'https://vityaz-security-agency.web.app'],
    credentials: true
}));
app.use(express.json());

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        version: '1.0.0'
    });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/send-alarm', async (req, res) => {
    try {
        const { type, target, userIds, title, body } = req.body;

        console.log('üì° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
            type,
            target,
            userIds: userIds?.length || 0,
            title,
            body
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
        const now = Date.now();
        const lastSend = lastSendTime.get(target) || 0;

        if (now - lastSend < MIN_SEND_INTERVAL) {
            const remainingTime = Math.ceil((MIN_SEND_INTERVAL - (now - lastSend)) / 1000);
            console.log(`‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`);
            return res.status(429).json({
                success: false,
                message: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`,
                retryAfter: remainingTime
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        lastSendTime.set(target, now);

        let result;

        if (target === 'users' && userIds && userIds.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const objectId = req.body.objectId;
            const objectName = req.body.objectName;
            result = await sendAlarmPushToUsers(userIds, title, body, objectId, objectName);
        } else {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const objectId = req.body.objectId;
            const objectName = req.body.objectName;
            result = await sendAlarmPushToAll(title, body, objectId, objectName);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!result) {
            result = { sentCount: 0, errorCount: 1 };
        }

        res.json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            sentCount: result.sentCount || 0,
            errorCount: result.errorCount || 0,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            error: error.message
        });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/send-test', async (req, res) => {
    try {
        const { title, body, testId, senderId, senderName } = req.body;

        console.log('üì° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
            title,
            body,
            testId,
            senderId,
            senderName
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
        const now = Date.now();
        const lastSend = lastSendTime.get('test') || 0;

        if (now - lastSend < MIN_SEND_INTERVAL) {
            const remainingTime = Math.ceil((MIN_SEND_INTERVAL - (now - lastSend)) / 1000);
            console.log(`‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`);
            return res.status(429).json({
                success: false,
                message: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`,
                remainingTime
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        lastSendTime.set('test', now);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const result = await sendAlarmPushToAll({
            title: title || '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏',
            body: body || '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏',
            data: {
                type: 'test-notification',
                testId: testId || `test_${Date.now()}`,
                senderId: senderId || 'system',
                senderName: senderName || '–°–∏—Å—Ç–µ–º–∞',
                timestamp: Date.now()
            }
        });

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);

        res.json({
            success: true,
            message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            sentCount: result.sentCount || 0,
            errorCount: result.errorCount || 0,
            testId: testId || `test_${Date.now()}`,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            error: error.message
        });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
app.get('/stats', async (req, res) => {
    try {
        const admin = require('firebase-admin');
        const db = admin.firestore();

        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();
        let valid = 0;
        let invalid = 0;

        subscriptionsSnapshot.forEach(doc => {
            const data = doc.data();
            if (data.subscription?.endpoint || data.endpoint) {
                valid++;
            } else {
                invalid++;
            }
        });

        res.json({
            total: subscriptionsSnapshot.size,
            valid,
            invalid,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            error: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
app.post('/get-fcm-token', async (req, res) => {
    try {
        const { userId, userRole, deviceInfo } = req.body;

        console.log('üîë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ FCM —Ç–æ–∫–µ–Ω:', { userId, userRole });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!userId || !userRole) {
            return res.status(400).json({
                success: false,
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è userId –∏ userRole'
            });
        }

        const admin = require('firebase-admin');

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è FCM
        const customToken = await admin.auth().createCustomToken(userId, {
            role: userRole,
            deviceInfo: deviceInfo || {}
        });

        console.log('‚úÖ Custom token —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

        res.json({
            success: true,
            customToken: customToken,
            message: 'Custom token —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞',
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Push-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${PORT}/stats`);
    console.log(`üîç –°—Ç–∞—Ç—É—Å: http://localhost:${PORT}/status`);
    console.log(`üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: ${MIN_SEND_INTERVAL}ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏`);
});

module.exports = app; 