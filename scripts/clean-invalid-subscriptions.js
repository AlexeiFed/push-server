/**
 * @file: clean-invalid-subscriptions.js
 * @description: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫
 * @dependencies: firebase-admin, dotenv
 * @created: 2025-07-24
 */

require('dotenv').config();
const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
let serviceAccount;
if (process.env.FIREBASE_SERVICE_ACCOUNT) {
    serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
} else {
    serviceAccount = require('./serviceAccountKey.json');
}

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

async function cleanInvalidSubscriptions() {
    try {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫...\n');

        const db = admin.firestore();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}\n`);

        let validSubscriptions = 0;
        let deletedSubscriptions = 0;
        const deletedIds = [];

        for (const doc of subscriptionsSnapshot.docs) {
            const subscriptionData = doc.data();
            console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ID: ${doc.id}`);
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${subscriptionData.userId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (subscriptionData.userId) {
                try {
                    const userDoc = await db.collection('users').doc(subscriptionData.userId).get();
                    if (userDoc.exists) {
                        const userData = userDoc.data();
                        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω: ${userData.name} (${userData.role})`);
                        validSubscriptions++;
                    } else {
                        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ - –£–î–ê–õ–Ø–ï–ú`);
                        await doc.ref.delete();
                        deletedSubscriptions++;
                        deletedIds.push(doc.id);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message} - –£–î–ê–õ–Ø–ï–ú`);
                    await doc.ref.delete();
                    deletedSubscriptions++;
                    deletedIds.push(doc.id);
                }
            } else {
                console.log(`   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω - –£–î–ê–õ–Ø–ï–ú`);
                await doc.ref.delete();
                deletedSubscriptions++;
                deletedIds.push(doc.id);
            }
        }

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:');
        console.log(`   –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}`);
        console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö: ${validSubscriptions}`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ: ${deletedSubscriptions}`);

        if (deletedIds.length > 0) {
            console.log('\nüóëÔ∏è –£–î–ê–õ–ï–ù–ù–´–ï –ü–û–î–ü–ò–°–ö–ò:');
            deletedIds.forEach((id, index) => {
                console.log(`   ${index + 1}. ${id}`);
            });
        }

        console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    } finally {
        process.exit(0);
    }
}

cleanInvalidSubscriptions(); 