/**
 * @file: test-push-detailed.js
 * @description: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 * @dependencies: firebase-admin, web-push, dotenv
 * @created: 2025-07-24
 */

require('dotenv').config();
const admin = require('firebase-admin');
const webpush = require('web-push');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
let serviceAccount;
if (process.env.FIREBASE_SERVICE_ACCOUNT) {
    serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
} else {
    serviceAccount = require('./serviceAccountKey.json');
}

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ web-push
webpush.setVapidDetails(
    'mailto:admin@vityaz-security.ru',
    process.env.VAPID_PUBLIC_KEY,
    process.env.VAPID_PRIVATE_KEY
);

async function testPushDetailed() {
    try {
        console.log('üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');

        const db = admin.firestore();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}\n`);

        let successCount = 0;
        let errorCount = 0;
        const results = [];

        for (const doc of subscriptionsSnapshot.docs) {
            const subscriptionData = doc.data();
            console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ID: ${doc.id}`);
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${subscriptionData.userId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            let userRole = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            if (subscriptionData.userId) {
                try {
                    const userDoc = await db.collection('users').doc(subscriptionData.userId).get();
                    if (userDoc.exists) {
                        const userData = userDoc.data();
                        userName = userData.name;
                        userRole = userData.role;
                        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (${userRole})`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
            let subscription;
            if (subscriptionData.subscription) {
                subscription = subscriptionData.subscription;
                console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { userId, subscription }`);
            } else {
                subscription = subscriptionData;
                console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { endpoint, keys }`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
            if (!subscription.endpoint || !subscription.keys) {
                console.log(`   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏`);
                errorCount++;
                results.push({
                    id: doc.id,
                    userName,
                    userRole,
                    status: 'error',
                    error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏'
                });
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            if (!subscription.keys.p256dh || !subscription.keys.auth) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏`);
                errorCount++;
                results.push({
                    id: doc.id,
                    userName,
                    userRole,
                    status: 'error',
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏'
                });
                continue;
            }

            console.log(`   ‚úÖ Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
            console.log(`   ‚úÖ Keys: p256dh –∏ auth –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);

            try {
                const payload = JSON.stringify({
                    title: '–¢–µ—Å—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                    body: `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${userName} (${userRole})`,
                    icon: '/logo192.png',
                    badge: '/logo192.png',
                    tag: 'test',
                    data: {
                        type: 'test',
                        userId: subscriptionData.userId,
                        timestamp: Date.now()
                    },
                    actions: [
                        {
                            action: 'view',
                            title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                        }
                    ],
                    requireInteraction: true
                });

                console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...`);

                await webpush.sendNotification(
                    {
                        endpoint: subscription.endpoint,
                        keys: {
                            p256dh: subscription.keys.p256dh,
                            auth: subscription.keys.auth
                        }
                    },
                    payload
                );

                console.log(`   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                successCount++;
                results.push({
                    id: doc.id,
                    userName,
                    userRole,
                    status: 'success'
                });

            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
                if (error.statusCode) {
                    console.log(`   üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.statusCode}`);
                }

                errorCount++;
                results.push({
                    id: doc.id,
                    userName,
                    userRole,
                    status: 'error',
                    error: error.message,
                    statusCode: error.statusCode
                });

                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (error.statusCode === 410) {
                    try {
                        await doc.ref.delete();
                        console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞`);
                    } catch (deleteError) {
                        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${deleteError.message}`);
                    }
                }
            }
        }

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log(`   –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}`);
        console.log(`   –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);

        console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        results.forEach((result, index) => {
            const statusIcon = result.status === 'success' ? '‚úÖ' : '‚ùå';
            console.log(`   ${index + 1}. ${statusIcon} ${result.userName} (${result.userRole})`);
            if (result.status === 'error') {
                console.log(`      –û—à–∏–±–∫–∞: ${result.error}`);
                if (result.statusCode) {
                    console.log(`      HTTP —Å—Ç–∞—Ç—É—Å: ${result.statusCode}`);
                }
            }
        });

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (errorCount > 0) {
            console.log(`   - ${errorCount} –ø–æ–¥–ø–∏—Å–æ–∫ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã`);
            console.log(`   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            console.log(`   - –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        }
        if (successCount === 0) {
            console.log(`   - –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VAPID –∫–ª—é—á–∏`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        process.exit(0);
    }
}

testPushDetailed(); 