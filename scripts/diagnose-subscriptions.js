/**
 * @file: diagnose-subscriptions.js
 * @description: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ push-–ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
 * @dependencies: firebase-admin, dotenv
 * @created: 2025-07-24
 */

require('dotenv').config();
const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
let serviceAccount;
if (process.env.FIREBASE_SERVICE_ACCOUNT) {
    serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
} else {
    serviceAccount = require('./serviceAccountKey.json');
}

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

async function diagnoseSubscriptions() {
    try {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ push-–ø–æ–¥–ø–∏—Å–æ–∫...\n');

        const db = admin.firestore();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}\n`);

        let validSubscriptions = 0;
        let invalidSubscriptions = 0;
        const issues = [];

        for (const doc of subscriptionsSnapshot.docs) {
            const subscriptionData = doc.data();
            console.log(`\nüìã –ü–æ–¥–ø–∏—Å–∫–∞ ID: ${doc.id}`);
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${subscriptionData.userId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
            let subscription;
            if (subscriptionData.subscription) {
                subscription = subscriptionData.subscription;
                console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { userId, subscription }`);
            } else {
                subscription = subscriptionData;
                console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { endpoint, keys }`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ endpoint
            if (!subscription.endpoint) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç endpoint`);
                issues.push({
                    id: doc.id,
                    issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç endpoint',
                    userId: subscriptionData.userId
                });
                invalidSubscriptions++;
                continue;
            }

            console.log(`   ‚úÖ Endpoint: ${subscription.endpoint.substring(0, 50)}...`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ keys
            if (!subscription.keys) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç keys`);
                issues.push({
                    id: doc.id,
                    issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç keys',
                    userId: subscriptionData.userId
                });
                invalidSubscriptions++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º p256dh –∫–ª—é—á
            if (!subscription.keys.p256dh) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç p256dh –∫–ª—é—á`);
                issues.push({
                    id: doc.id,
                    issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç p256dh –∫–ª—é—á',
                    userId: subscriptionData.userId
                });
                invalidSubscriptions++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth –∫–ª—é—á
            if (!subscription.keys.auth) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth –∫–ª—é—á`);
                issues.push({
                    id: doc.id,
                    issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth –∫–ª—é—á',
                    userId: subscriptionData.userId
                });
                invalidSubscriptions++;
                continue;
            }

            console.log(`   ‚úÖ Keys: p256dh –∏ auth –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (subscriptionData.userId) {
                try {
                    const userDoc = await db.collection('users').doc(subscriptionData.userId).get();
                    if (userDoc.exists) {
                        const userData = userDoc.data();
                        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω: ${userData.name} (${userData.role})`);
                    } else {
                        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
                        issues.push({
                            id: doc.id,
                            issue: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ',
                            userId: subscriptionData.userId
                        });
                        invalidSubscriptions++;
                        continue;
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
                    issues.push({
                        id: doc.id,
                        issue: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
                        userId: subscriptionData.userId
                    });
                    invalidSubscriptions++;
                    continue;
                }
            } else {
                console.log(`   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω`);
            }

            validSubscriptions++;
        }

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
        console.log(`   –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionsSnapshot.size}`);
        console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö: ${validSubscriptions}`);
        console.log(`   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidSubscriptions}`);

        if (issues.length > 0) {
            console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–´:');
            issues.forEach((issue, index) => {
                console.log(`   ${index + 1}. ID: ${issue.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${issue.userId}, –ü—Ä–æ–±–ª–µ–º–∞: ${issue.issue}`);
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (invalidSubscriptions > 0) {
            console.log(`   - –£–¥–∞–ª–∏—Ç–µ ${invalidSubscriptions} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
            console.log(`   - –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        }
        if (validSubscriptions === 0) {
            console.log(`   - –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    } finally {
        process.exit(0);
    }
}

diagnoseSubscriptions(); 