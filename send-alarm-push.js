const webpush = require('web-push');
const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// VAPID –∫–ª—é—á–∏ (–¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ PWA)
const VAPID_PUBLIC_KEY = 'BPtABepktG0gcckjqEzxjRoFEubhuujI9jvNE9hRIrJmw6W9wpvJitFCqMkbdvde_Xokh98oJIs6RDkQ4-SKU_A';
const VAPID_PRIVATE_KEY = '5Ayim_hP-yVT6C2kkx6Ei8GT7PZLQH-ShuRvDPv30CY';

console.log('üîë VAPID Public Key:', VAPID_PUBLIC_KEY);
console.log('üîë VAPID Private Key:', VAPID_PRIVATE_KEY.substring(0, 10) + '...');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAPID
webpush.setVapidDetails(
    'mailto:23alex08@mail.ru',
    VAPID_PUBLIC_KEY,
    VAPID_PRIVATE_KEY
);

async function sendAlarmPushToAll(customTitle, customBody, objectId, objectName) {
    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Web Push API...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Firestore
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ push_subscriptions');
            return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫`);

        const promises = subscriptionsSnapshot.docs.map(async (doc) => {
            const subscriptionData = doc.data();
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–µ: ${doc.id}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, JSON.stringify(subscriptionData, null, 2));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
            let subscription;
            if (subscriptionData.subscription) {
                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –ø–æ–ª–µ subscription
                subscription = subscriptionData.subscription;
            } else if (subscriptionData.endpoint) {
                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                subscription = subscriptionData;
            } else {
                console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${doc.id}:`, subscriptionData);
                return { success: false, id: doc.id, error: 'Invalid subscription structure' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ endpoint
            if (!subscription.endpoint) {
                console.error(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ ${doc.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç endpoint`);
                return { success: false, id: doc.id, error: 'Missing endpoint' };
            }

            try {
                // –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
                const payload = JSON.stringify({
                    title: customTitle || 'üö® –¢–†–ï–í–û–ì–ê!',
                    body: customBody || '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.',
                    icon: '/icons/logo-vityaz.png',
                    badge: '/icons/logo-vityaz.png',
                    tag: 'alarm',
                    requireInteraction: true,
                    data: {
                        url: objectId ? `/alarm/${objectId}` : '/alarm',
                        type: 'alarm',
                        timestamp: Date.now().toString(),
                        objectId: objectId || null,
                        objectName: objectName || null,
                        sound: '/sounds/alarm-siren.mp3',
                        vibration: '1000,500,1000,500,1000,500,1000,500,1000'
                    }
                });

                const result = await webpush.sendNotification(subscription, payload);
                console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${doc.id}`);
                return { success: true, id: doc.id };

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${doc.id}:`, error.message);

                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (error.statusCode === 410) {
                    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: ${doc.id}`);
                    await doc.ref.delete();
                }

                return { success: false, id: doc.id, error: error.message };
            }
        });

        const results = await Promise.all(promises);
        const successCount = results.filter(r => r.success).length;
        const errorCount = results.filter(r => !r.success).length;

        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

async function sendAlarmPushToUsers(userIds, customTitle, customBody, objectId, objectName) {
    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
        console.log('üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', userIds);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ push_subscriptions
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ push_subscriptions');
            return { sentCount: 0, errorCount: 0 };
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);

        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        const usersWithSubscriptions = subscriptionsSnapshot.docs.map(doc => doc.id);
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:', usersWithSubscriptions);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        const targetUsersWithSubscriptions = userIds.filter(uid => usersWithSubscriptions.includes(uid));
        console.log('üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:', targetUsersWithSubscriptions);

        if (targetUsersWithSubscriptions.length === 0) {
            console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏');
            return { sentCount: 0, errorCount: 0 };
        }

        const promises = subscriptionsSnapshot.docs.map(async (doc) => {
            const subscriptionData = doc.data();
            const subscriptionUserId = doc.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = ID –¥–æ–∫—É–º–µ–Ω—Ç–∞

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ü–µ–ª–µ–≤—ã—Ö
            if (userIds && !userIds.includes(subscriptionUserId)) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscriptionUserId} (–Ω–µ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ)`);
                return { success: false, user: subscriptionUserId, error: 'User not in target list' };
            }

            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${subscriptionUserId}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
            let subscription;
            if (subscriptionData.subscription) {
                subscription = subscriptionData.subscription;
            } else if (subscriptionData.endpoint) {
                subscription = subscriptionData;
            } else {
                console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionUserId}:`, subscriptionData);
                return { success: false, user: subscriptionUserId, error: 'Invalid subscription structure' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ endpoint
            if (!subscription.endpoint) {
                console.error(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionUserId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç endpoint`);
                return { success: false, user: subscriptionUserId, error: 'Missing endpoint' };
            }

            try {
                // –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
                const payload = JSON.stringify({
                    title: customTitle || 'üö® –¢–†–ï–í–û–ì–ê!',
                    body: customBody || `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.`,
                    icon: '/icons/logo-vityaz.png',
                    badge: '/icons/logo-vityaz.png',
                    tag: 'alarm',
                    requireInteraction: true,
                    data: {
                        url: objectId ? `/alarm/${objectId}` : '/alarm',
                        type: 'alarm',
                        timestamp: Date.now().toString(),
                        user: subscriptionUserId,
                        objectId: objectId || null,
                        objectName: objectName || null,
                        sound: '/sounds/alarm-siren.mp3',
                        vibration: '1000,500,1000,500,1000,500,1000,500,1000'
                    }
                });

                const result = await webpush.sendNotification(subscription, payload);
                console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${subscriptionUserId}`);
                return { success: true, user: subscriptionUserId };

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriptionUserId}:`, error.message);

                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (error.statusCode === 410) {
                    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: ${subscriptionUserId}`);
                    await doc.ref.delete();
                }

                return { success: false, user: subscriptionUserId, error: error.message };
            }
        });

        const results = await Promise.all(promises);
        const successCount = results.filter(r => r.success).length;
        const errorCount = results.filter(r => !r.success).length;

        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

        return { sentCount: successCount, errorCount };

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        return { sentCount: 0, errorCount: 1 };
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.includes('--users')) {
    sendAlarmPushToUsers();
} else {
    sendAlarmPushToAll();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server.js
module.exports = {
    sendAlarmPushToAll,
    sendAlarmPushToUsers
};