const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

async function cleanSubscriptions() {
    try {
        console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const subscriptionsSnapshot = await db.collection('push_subscriptions').get();

        if (subscriptionsSnapshot.empty) {
            console.log('üìã –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫`);

        let validCount = 0;
        let invalidCount = 0;

        for (const doc of subscriptionsSnapshot.docs) {
            const subscriptionData = doc.data();
            console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: ${doc.id}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(subscriptionData, null, 2));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            let subscription;
            if (subscriptionData.subscription) {
                subscription = subscriptionData.subscription;
            } else if (subscriptionData.endpoint) {
                subscription = subscriptionData;
            } else {
                console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —É–¥–∞–ª—è–µ–º`);
                await doc.ref.delete();
                invalidCount++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ endpoint
            if (!subscription.endpoint) {
                console.log(`‚ùå –ù–µ—Ç endpoint - —É–¥–∞–ª—è–µ–º`);
                await doc.ref.delete();
                invalidCount++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç endpoint
            if (!subscription.endpoint.startsWith('https://')) {
                console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç endpoint - —É–¥–∞–ª—è–µ–º`);
                await doc.ref.delete();
                invalidCount++;
                continue;
            }

            console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω–∞`);
            validCount++;
        }

        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:`);
        console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${validCount}`);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidCount}`);

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫
cleanSubscriptions().then(() => {
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 