const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

async function removeUserSubscription(userId) {
    try {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const subscriptionsSnapshot = await db.collection('push_subscriptions')
            .where('userId', '==', userId)
            .get();

        if (subscriptionsSnapshot.empty) {
            console.log(`üìã –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            return { success: true, message: '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const deletePromises = subscriptionsSnapshot.docs.map(doc => doc.ref.delete());
        await Promise.all(deletePromises);

        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        return {
            success: true,
            message: `–£–¥–∞–ª–µ–Ω–æ ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫`,
            deletedCount: subscriptionsSnapshot.size
        };

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cloud Functions
module.exports = { removeUserSubscription };

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const userId = process.argv[2];
    if (!userId) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ userId –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
        process.exit(1);
    }

    removeUserSubscription(userId).then((result) => {
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        process.exit(result.success ? 0 : 1);
    }).catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 