/**
 * @file: check-user-subscriptions.js
 * @description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @usage: node check-user-subscriptions.js
 */

const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
const serviceAccount = require('./serviceAccountKey.json');
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TEST_USER_ID = '6on3OFPyMSNWjZJX4Cm8WtSh77P2';

async function checkUserSubscriptions() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', TEST_USER_ID);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const querySnapshot = await db.collection('push_subscriptions')
            .where('userId', '==', TEST_USER_ID)
            .get();

        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫:', querySnapshot.size);

        if (querySnapshot.empty) {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');

            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
            const allSubscriptions = await db.collection('push_subscriptions').get();
            console.log('üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', allSubscriptions.size);

            allSubscriptions.forEach(doc => {
                const data = doc.data();
                console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç:', doc.id, 'userId:', data.userId);
            });

            return;
        }

        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        querySnapshot.forEach(doc => {
            const data = doc.data();
            console.log('\nüìÑ –ü–æ–¥–ø–∏—Å–∫–∞ ID:', doc.id);
            console.log('üë§ User ID:', data.userId);
            console.log('üìÖ Created At:', data.createdAt?.toDate());
            console.log('üîÑ Restored:', data.restored);

            if (data.subscription) {
                console.log('üîó Endpoint:', data.subscription.endpoint?.substring(0, 50) + '...');
                console.log('üîë Keys:', {
                    auth: data.subscription.keys?.auth ? 'present' : 'missing',
                    p256dh: data.subscription.keys?.p256dh ? 'present' : 'missing'
                });
            } else {
                console.log('‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ subscription –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                console.log('üìã –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUserSubscriptions().then(() => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 